/* @group Grid */
// Inspired by Bootstrap 4 — http://getbootstrap.com
.container {
	.no-flexwrap & { @include clearfix; }
}

.row {
	display: flex;
	flex-wrap: wrap;
	align-content: flex-start; /* Prevent from stretching since we need the content's height for margins */

	.no-flexwrap & {
		@include clearfix;
		display: block;
	}
}

.row-top     { align-items: flex-start;     }
.row-center  { align-items: center;         }
.row-bottom  { align-items: flex-end;       }
.row-reverse { flex-direction: row-reverse; }

.col {
	box-sizing: border-box;
	width: 100%;
	flex-shrink: 0;

	position: relative;

	.no-flexwrap & {
		min-height: 1px;
		float: left;
	}

	.row-reverse > & { text-align: right; }
}

.col-first  { order: -1; }
.col-last   { order:  1; }
.col-top    { align-self: flex-start; }
.col-center { align-self: center;     }
.col-bottom { align-self: flex-end;   }

.w-auto { width: auto; }
.w-25, .w-¼ { width: 25%; }
.w-50, .w-½ { width: 50%; }
.w-75, .w-¾ { width: 75%; }
.w-33, .w-⅓ { width: (100% / 3); }
.w-66, .w-⅔ { width: (100% / 3) * 2; }

.ma-0, .m-0  { margin:        0 !important; }
.mt-0, .mv-0 { margin-top:    0 !important; }
.mr-0, .mh-0 { margin-right:  0 !important; }
.mb-0, .mv-0 { margin-bottom: 0 !important; }
.ml-0, .mh-0 { margin-left:   0 !important; }

.ma-auto, .m-auto  { margin:        auto; }
.mt-auto, .mv-auto { margin-top:    auto; }
.mr-auto, .mh-auto { margin-right:  auto; }
.mb-auto, .mv-auto { margin-bottom: auto; }
.ml-auto, .mh-auto { margin-left:   auto; }

.pa-0, .p-0  { padding:        0 !important; }
.pt-0, .pv-0 { padding-top:    0 !important; }
.pr-0, .ph-0 { padding-right:  0 !important; }
.pb-0, .pv-0 { padding-bottom: 0 !important; }
.pl-0, .ph-0 { padding-left:   0 !important; }

// Prepare a mixin to easily add some custom rules depending on breakpoint
@mixin media($name, $strict: false) {
	$sm: map-get($grids, "sm");
	$md: map-get($grids, "md");
	$lg: map-get($grids, "lg");

	@if $name == "sm" {
		@if $strict {
			@media (max-width: map-get($md, "breakpoint")) {
				@content;
			}
		} @else {
			@content
		}
	}	@else if $name == "md" {
		@if $strict {
			@media (min-width: map-get($md, "breakpoint")) and (max-width: map-get($lg, "breakpoint")) {
				@content;
			}
		} @else {
			@media (min-width: map-get($md, "breakpoint")) {
				@content;
			}
		}
	}	@else if $name == "lg" {
		@media (min-width: map-get($lg, "breakpoint")) {
			@content;
		}
	}
}

@function grid-margin($device) {
	@return map-get(map-get($grids, $device), "margin");
}

@function grid-gutter($device) {
	@return map-get(map-get($grids, $device), "gutter");
}

$last-breakpoint: null;
$last-columns:    null;
$last-margin:     null;
$last-gutter:     null;

@each $device, $grid in $grids {
	$breakpoint: map-get($grid, "breakpoint");
	$columns:    map-get($grid, "columns");
	$gutter:     map-get($grid, "gutter") / 2; // Prefer half gutters (added to both sides)
	$margin:     map-get($grid, "margin");

	// Set these rules for this device and larger
	@include media($device) {
		@if $margin != $last-margin {
			.container {
				/* Container's margins */
				// Remove an half-gutter since container's margin and column's gutters are merged
				padding-right: $margin - $gutter;
				padding-left:  $margin - $gutter;
			}
		}

		@if $gutter != $last-gutter {
			.col {
				/* Gutters */
				padding-right: $gutter;
				padding-left:  $gutter;
			}
		}

		.#{$device}-w-auto { width: auto; }
		.#{$device}-w-25, .#{$device}-w-¼ { width: 25%; }
		.#{$device}-w-50, .#{$device}-w-½ { width: 50%; }
		.#{$device}-w-75, .#{$device}-w-¾ { width: 75%; }
		.#{$device}-w-33, .#{$device}-w-⅓ { width: (100% / 3); }
		.#{$device}-w-66, .#{$device}-w-⅔ { width: (100% / 3) * 2; }

		// Generate .$device-$property-$amount-c(olumns)
		@for $i from 1 through $columns {
			$width: (100% / $columns) * $i;
			.#{$device}-w-#{$i}c { width: $width; }

			.#{$device}-ma-#{$i}c, .#{$device}-m-#{$i}c  { margin:        $width; }
			.#{$device}-mt-#{$i}c, .#{$device}-mv-#{$i}c { margin-top:    $width; }
			.#{$device}-mr-#{$i}c, .#{$device}-mh-#{$i}c { margin-right:  $width; }
			.#{$device}-mb-#{$i}c, .#{$device}-mv-#{$i}c { margin-bottom: $width; }
			.#{$device}-ml-#{$i}c, .#{$device}-mh-#{$i}c { margin-left:   $width; }

			.#{$device}-pa-#{$i}c, .#{$device}-p-#{$i}c  { padding:        $width; }
			.#{$device}-pt-#{$i}c, .#{$device}-pv-#{$i}c { padding-top:    $width; }
			.#{$device}-pr-#{$i}c, .#{$device}-ph-#{$i}c { padding-right:  $width; }
			.#{$device}-pb-#{$i}c, .#{$device}-pv-#{$i}c { padding-bottom: $width; }
			.#{$device}-pl-#{$i}c, .#{$device}-ph-#{$i}c { padding-left:   $width; }
		}

		// Add some special margin and padding classes (with gutter value)
		@for $i from 1 through 8 {
			$value: $gutter * $i;
			%ma-#{$i}-#{$gutter}g { @if $gutter != $last-gutter { margin:        $value; } }
			%mt-#{$i}-#{$gutter}g { @if $gutter != $last-gutter { margin-top:    $value; } }
			%mr-#{$i}-#{$gutter}g { @if $gutter != $last-gutter { margin-right:  $value; } }
			%mb-#{$i}-#{$gutter}g { @if $gutter != $last-gutter { margin-bottom: $value; } }
			%ml-#{$i}-#{$gutter}g { @if $gutter != $last-gutter { margin-left:   $value; } }

			%pa-#{$i}-#{$gutter}g { @if $gutter != $last-gutter { padding:        $value; } }
			%pt-#{$i}-#{$gutter}g { @if $gutter != $last-gutter { padding-top:    $value; } }
			%pr-#{$i}-#{$gutter}g { @if $gutter != $last-gutter { padding-right:  $value; } }
			%pb-#{$i}-#{$gutter}g { @if $gutter != $last-gutter { padding-bottom: $value; } }
			%pl-#{$i}-#{$gutter}g { @if $gutter != $last-gutter { padding-left:   $value; } }

			.ma-#{$i}g, .m-#{$i}g  { @extend %ma-#{$i}-#{$gutter}g; }
			.mt-#{$i}g, .mv-#{$i}g { @extend %mt-#{$i}-#{$gutter}g; }
			.mr-#{$i}g, .mh-#{$i}g { @extend %mr-#{$i}-#{$gutter}g; }
			.mb-#{$i}g, .mv-#{$i}g { @extend %mb-#{$i}-#{$gutter}g; }
			.ml-#{$i}g, .mh-#{$i}g { @extend %ml-#{$i}-#{$gutter}g; }

			.pa-#{$i}g, .p-#{$i}g  { @extend %pa-#{$i}-#{$gutter}g; }
			.pt-#{$i}g, .pv-#{$i}g { @extend %pt-#{$i}-#{$gutter}g; }
			.pr-#{$i}g, .ph-#{$i}g { @extend %pr-#{$i}-#{$gutter}g; }
			.pb-#{$i}g, .pv-#{$i}g { @extend %pb-#{$i}-#{$gutter}g; }
			.pl-#{$i}g, .ph-#{$i}g { @extend %pl-#{$i}-#{$gutter}g; }
		}

		// Add some special margin and padding classes (with margin value)
		@for $i from 1 through 4 {
			$value: $margin * $i;
			%ma-#{$i}-#{$margin}m { @if $margin != $last-margin { margin:        $value; } }
			%mt-#{$i}-#{$margin}m { @if $margin != $last-margin { margin-top:    $value; } }
			%mr-#{$i}-#{$margin}m { @if $margin != $last-margin { margin-right:  $value; } }
			%mb-#{$i}-#{$margin}m { @if $margin != $last-margin { margin-bottom: $value; } }
			%ml-#{$i}-#{$margin}m { @if $margin != $last-margin { margin-left:   $value; } }

			%pa-#{$i}-#{$margin}m { @if $margin != $last-margin { padding:        $value; } }
			%pt-#{$i}-#{$margin}m { @if $margin != $last-margin { padding-top:    $value; } }
			%pr-#{$i}-#{$margin}m { @if $margin != $last-margin { padding-right:  $value; } }
			%pb-#{$i}-#{$margin}m { @if $margin != $last-margin { padding-bottom: $value; } }
			%pl-#{$i}-#{$margin}m { @if $margin != $last-margin { padding-left:   $value; } }

			.ma-#{$i}m, .m-#{$i}m  { @extend %ma-#{$i}-#{$margin}m; }
			.mt-#{$i}m, .mv-#{$i}m { @extend %mt-#{$i}-#{$margin}m; }
			.mr-#{$i}m, .mh-#{$i}m { @extend %mr-#{$i}-#{$margin}m; }
			.mb-#{$i}m, .mv-#{$i}m { @extend %mb-#{$i}-#{$margin}m; }
			.ml-#{$i}m, .mh-#{$i}m { @extend %ml-#{$i}-#{$margin}m; }

			.pa-#{$i}m, .p-#{$i}m  { @extend %pa-#{$i}-#{$margin}m; }
			.pt-#{$i}m, .pv-#{$i}m { @extend %pt-#{$i}-#{$margin}m; }
			.pr-#{$i}m, .ph-#{$i}m { @extend %pr-#{$i}-#{$margin}m; }
			.pb-#{$i}m, .pv-#{$i}m { @extend %pb-#{$i}-#{$margin}m; }
			.pl-#{$i}m, .ph-#{$i}m { @extend %pl-#{$i}-#{$margin}m; }
		}
	}

	// Set these rules for this device only
	@include media($device, $strict: true) {
		.#{$device}-row-top     { align-items: flex-start;     }
		.#{$device}-row-center  { align-items: center;         }
		.#{$device}-row-bottom  { align-items: flex-end;       }
		.#{$device}-row-reverse { flex-direction: row-reverse; }

		.#{$device}-col-first  { order: -1; }
		.#{$device}-col-last   { order:  1; }
		.#{$device}-col-top    { align-self: flex-start; }
		.#{$device}-col-center { align-self: center;     }
		.#{$device}-col-bottom { align-self: flex-end;   }

		.#{$device}-ma-0, .#{$device}-m-0  { margin:        0; }
		.#{$device}-mt-0, .#{$device}-mv-0 { margin-top:    0; }
		.#{$device}-mr-0, .#{$device}-mh-0 { margin-right:  0; }
		.#{$device}-mb-0, .#{$device}-mv-0 { margin-bottom: 0; }
		.#{$device}-ml-0, .#{$device}-mh-0 { margin-left:   0; }

		.#{$device}-ma-auto, .#{$device}-m-auto  { margin:        auto; }
		.#{$device}-mt-auto, .#{$device}-mv-auto { margin-top:    auto; }
		.#{$device}-mr-auto, .#{$device}-mh-auto { margin-right:  auto; }
		.#{$device}-mb-auto, .#{$device}-mv-auto { margin-bottom: auto; }
		.#{$device}-ml-auto, .#{$device}-mh-auto { margin-left:   auto; }

		.#{$device}-pa-0, .#{$device}-p-0  { padding:        0; }
		.#{$device}-pt-0, .#{$device}-pv-0 { padding-top:    0; }
		.#{$device}-pr-0, .#{$device}-ph-0 { padding-right:  0; }
		.#{$device}-pb-0, .#{$device}-pv-0 { padding-bottom: 0; }
		.#{$device}-pl-0, .#{$device}-ph-0 { padding-left:   0; }

		// Add some special .$device-X-Yg to easily set margin or padding to a gutter multiplicator
		@for $i from 1 through 8 {
			$value: $gutter * $i;
			.#{$device}-ma-#{$i}g, .#{$device}-m-#{$i}g  { margin:        $value; }
			.#{$device}-mt-#{$i}g, .#{$device}-mv-#{$i}g { margin-top:    $value; }
			.#{$device}-mr-#{$i}g, .#{$device}-mh-#{$i}g { margin-right:  $value; }
			.#{$device}-mb-#{$i}g, .#{$device}-mv-#{$i}g { margin-bottom: $value; }
			.#{$device}-ml-#{$i}g, .#{$device}-mh-#{$i}g { margin-left:   $value; }

			.#{$device}-pa-#{$i}g, .#{$device}-p-#{$i}g  { padding:        $value; }
			.#{$device}-pt-#{$i}g, .#{$device}-pv-#{$i}g { padding-top:    $value; }
			.#{$device}-pr-#{$i}g, .#{$device}-ph-#{$i}g { padding-right:  $value; }
			.#{$device}-pb-#{$i}g, .#{$device}-pv-#{$i}g { padding-bottom: $value; }
			.#{$device}-pl-#{$i}g, .#{$device}-ph-#{$i}g { padding-left:   $value; }
		}

		// Add some special .$device-X-Ym to easily set margin or padding to a margin multiplicator
		@for $i from 1 through 4 {
			$value: $margin * $i;
			.#{$device}-ma-#{$i}m, .#{$device}-m-#{$i}m  { margin:        $value; }
			.#{$device}-mt-#{$i}m, .#{$device}-mv-#{$i}m { margin-top:    $value; }
			.#{$device}-mr-#{$i}m, .#{$device}-mh-#{$i}m { margin-right:  $value; }
			.#{$device}-mb-#{$i}m, .#{$device}-mv-#{$i}m { margin-bottom: $value; }
			.#{$device}-ml-#{$i}m, .#{$device}-mh-#{$i}m { margin-left:   $value; }

			.#{$device}-pa-#{$i}m, .#{$device}-p-#{$i}m  { padding:        $value; }
			.#{$device}-pt-#{$i}m, .#{$device}-pv-#{$i}m { padding-top:    $value; }
			.#{$device}-pr-#{$i}m, .#{$device}-ph-#{$i}m { padding-right:  $value; }
			.#{$device}-pb-#{$i}m, .#{$device}-pv-#{$i}m { padding-bottom: $value; }
			.#{$device}-pl-#{$i}m, .#{$device}-ph-#{$i}m { padding-left:   $value; }
		}
	}

	$last-breakpoint: $breakpoint;
	$last-columns:    $columns;
	$last-margin:     $margin;
	$last-gutter:     $gutter;
}
/* @end of Grid */