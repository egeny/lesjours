/* @group Grid */
// Inspired by Bootstrap 4 â€” http://getbootstrap.com
.container,
.container-fixed {}

.no-flex .container,
.no-flex .container-fixed { @include clearfix; }

.container-fixed {
	margin-right: auto;
	margin-left:  auto;
}

.container-no-margin {
	padding-right: 0 !important;
	padding-left:  0 !important;
}

.row {
	display: flex;
	flex-wrap: wrap;
	align-content: flex-start; /* Prevent from stretching since we need the content's height for margins */
}

.no-flex .row {
	@include clearfix;
	display: block;
}

.row-top     { align-items: flex-start;     }
.row-center  { align-items: center;         }
.row-bottom  { align-items: flex-end;       }
.row-reverse { flex-direction: row-reverse; }

.col {
	box-sizing: border-box;
	width: 100%;
	flex-shrink: 0;

	position: relative;
}

.no-flex .col {
	min-height: 1px;
	float: left;
}

.col-auto { width: auto; }

.col-first  { order: -1; }
.col-last   { order:  1; }
.col-top    { align-self: flex-start; }
.col-center { align-self: center;     }
.col-bottom { align-self: flex-end;   }

.gutter-top-0    { margin-top:    0 !important; }
.gutter-right-0  { padding-right: 0 !important; }
.gutter-bottom-0 { margin-bottom: 0 !important; }
.gutter-left-0   { padding-left:  0 !important; }
.gutter-0        {
	@extend .gutter-right-0;
	@extend .gutter-left-0;
}

// Prepare a mixin to easily add some custom rules depending on breakpoint
@mixin media($name, $only: false) {
	$sm: map-get($grids, "sm");
	$md: map-get($grids, "md");
	$lg: map-get($grids, "lg");

	@if $name == "sm" {
		@if $only {
			@media (max-width: map-get($md, "breakpoint")) {
				@content;
			}
		} @else {
			@content
		}
	}	@else if $name == "md" {
		@if $only {
			@media (min-width: map-get($md, "breakpoint")) and (max-width: map-get($lg, "breakpoint")) {
				@content;
			}
		} @else {
			@media (min-width: map-get($md, "breakpoint")) {
				@content;
			}
		}
	}	@else if $name == "lg" {
		@media (min-width: map-get($lg, "breakpoint")) {
			@content;
		}
	}
}

@function grid-margin($device) {
	@return map-get(map-get($grids, $device), "margin");
}

@function grid-gutter($device) {
	@return map-get(map-get($grids, $device), "gutter");
}

$last-breakpoint: null;
$last-columns:    null;
$last-margin:     null;
$last-gutter:     null;

@each $device, $grid in $grids {
	$breakpoint: map-get($grid, "breakpoint");
	$columns:    map-get($grid, "columns");
	$gutter:     map-get($grid, "gutter") / 2;
	$margin:     map-get($grid, "margin") - $gutter;

	// Set these rules for this device and larger
	@include media($device) {
		@if $margin != $last-margin {
			.container,
			.container-fixed {
				/* Container's margins */
				padding-right: $margin;
				padding-left:  $margin;
			}
		}

		@if $breakpoint {
			.container-fixed { max-width: $breakpoint; }
		}

		.container-#{$device}-no-margin {
			padding-right: 0;
			padding-left:  0;
		}

		@if $gutter != $last-gutter {
			.col {
				/* Gutters */
				padding-right: $gutter;
				padding-left:  $gutter;
			}
		}

		.col-#{$device}-auto { width: auto; }

		.col-#{$device}-top-0    { margin-top:    0; }
		.col-#{$device}-right-0  { margin-right:  0; }
		.col-#{$device}-bottom-0 { margin-bottom: 0; }
		.col-#{$device}-left-0   { margin-left:   0; }

		.col-#{$device}-v-0 {
			@extend .col-#{$device}-top-0;
			@extend .col-#{$device}-bottom-0;
		}

		.col-#{$device}-h-0 {
			@extend .col-#{$device}-right-0;
			@extend .col-#{$device}-left-0;
		}

		// Generate .col-sm-*, .col-md-* and .col-lg-*
		@for $i from 1 through $columns {
			$width: (100% / $columns) * $i;
			.col-#{$device}-#{$i} { width: $width; }

			.col-#{$device}-top-#{$i}    { margin-top:    $width; }
			.col-#{$device}-right-#{$i}  { margin-right:  $width; }
			.col-#{$device}-bottom-#{$i} { margin-bottom: $width; }
			.col-#{$device}-left-#{$i}   { margin-left:   $width; }

			.col-#{$device}-v-#{$i} {
				@extend .col-#{$device}-top-#{$i};
				@extend .col-#{$device}-bottom-#{$i};
			}

			.col-#{$device}-h-#{$i} {
				@extend .col-#{$device}-right-#{$i};
				@extend .col-#{$device}-left-#{$i};
			}
		}

		// Add some special .gutter-top-X for special margin
		@for $i from 1 through 12 {
			%gutter-top-#{$gutter}-#{$i} {
				@if $gutter != $last-gutter { margin-top: $gutter * $i; }
			}

			%gutter-right-#{$gutter}-#{$i} {
				@if $gutter != $last-gutter { padding-right: $gutter * $i; }
			}

			%gutter-bottom-#{$gutter}-#{$i} {
				@if $gutter != $last-gutter { margin-bottom: $gutter * $i; }
			}

			%gutter-left-#{$gutter}-#{$i} {
				@if $gutter != $last-gutter { padding-left: $gutter * $i; }
			}

			%gutter-#{$gutter}-#{$i} {
				@if $gutter != $last-gutter {
					padding-right: $gutter * $i;
					padding-left:  $gutter * $i;
				}
			}

			.gutter-top-#{$i}    { @extend %gutter-top-#{$gutter}-#{$i};    }
			.gutter-right-#{$i}  { @extend %gutter-right-#{$gutter}-#{$i};  }
			.gutter-bottom-#{$i} { @extend %gutter-bottom-#{$gutter}-#{$i}; }
			.gutter-left-#{$i}   { @extend %gutter-left-#{$gutter}-#{$i};   }
			.gutter-#{$i}        { @extend %gutter-#{$gutter}-#{$i};        }
		}
	}

	// Set these rules for this device only
	@include media($device, true) {
		.row-#{$device}-top     { align-items: flex-start;     }
		.row-#{$device}-center  { align-items: center;         }
		.row-#{$device}-bottom  { align-items: flex-end;       }
		.row-#{$device}-reverse { flex-direction: row-reverse; }

		.col-#{$device}-first  { order: -1; }
		.col-#{$device}-last   { order:  1; }
		.col-#{$device}-top    { align-self: flex-start; }
		.col-#{$device}-center { align-self: center;     }
		.col-#{$device}-bottom { align-self: flex-end;   }

		.gutter-#{$device}-top-0    { margin-top:    0; }
		.gutter-#{$device}-right-0  { padding-right: 0; }
		.gutter-#{$device}-bottom-0 { margin-bottom: 0; }
		.gutter-#{$device}-left-0   { padding-left:  0; }
		.gutter-#{$device}-0        {
			@extend .gutter-#{$device}-right-0;
			@extend .gutter-#{$device}-left-0;
		}

		// Add some special .gutter-$device-top-X for special margin
		@for $i from 1 through 12 {
			.gutter-#{$device}-top-#{$i}    { margin-top:    $gutter * $i; }
			.gutter-#{$device}-right-#{$i}  { padding-right: $gutter * $i; }
			.gutter-#{$device}-bottom-#{$i} { margin-bottom: $gutter * $i; }
			.gutter-#{$device}-left-#{$i}   { padding-left:  $gutter * $i; }
			.gutter-#{$device}-#{$i}        {
				@extend .gutter-#{$device}-right-#{$i};
				@extend .gutter-#{$device}-left-#{$i};
			}
		}
	}

	$last-breakpoint: $breakpoint;
	$last-columns:    $columns;
	$last-margin:     $margin;
	$last-gutter:     $gutter;
}
/* @end of Grid */