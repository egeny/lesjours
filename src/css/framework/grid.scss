/* @group Grid */
// Inspired by Bootstrap 4 â€” http://getbootstrap.com
.container,
.container-fixed {
	@include clearfix();
	box-sizing: border-box;
}

.container-fixed {
	margin-right: auto;
	margin-left:  auto;
}

.container-no-margin {
	padding-right: 0 !important;
	padding-left:  0 !important;
}

.row { @include clearfix(); }

.has-flex .row {
	display: flex;
	flex-wrap: wrap;
	align-content: flex-start;
}

// Use a mixin since these rules might be used in a @media
@mixin row-top()    { align-items: flex-start; }
@mixin row-center() { align-items: center;     }
@mixin row-bottom() { align-items: flex-end;   }

.row-top    { @include row-top;    }
.row-center { @include row-center; }
.row-bottom { @include row-bottom; }

.col {
	box-sizing: border-box;
	width: 100%;
	min-height: 1px;

	float: left;
	position: relative;
}

.has-flex .col {
	width: auto;
	float: none;
	flex: 0 0 100%;
}

// Use a mixin since these rules might be used in a @media
@mixin col-first()  { order: -1; }
@mixin col-last()   { order:  1; }
@mixin col-top()    { align-self: flex-start; }
@mixin col-center() { align-self: center;     }
@mixin col-bottom() { align-self: flex-end;   }

.col-first  { @include col-first;  }
.col-last   { @include col-last;   }
.col-top    { @include col-top;    }
.col-center { @include col-center; }
.col-bottom { @include col-bottom; }

@mixin breakpoint($breakpoint) {
	@if $breakpoint {
		@media (min-width: $breakpoint) {
			@content;
		}
	} @else {
		@content;
	}
}

// Prepare a mixin to easily add some custom rules depending on breakpoint
@mixin media-md {
	@media (min-width: map-get(map-get($grids, "md"), "breakpoint")) {
		@content;
	}
}

@mixin media-lg {
	@media (min-width: map-get(map-get($grids, "lg"), "breakpoint")) {
		@content;
	}
}

@function grid-margin($device) {
	@return map-get(map-get($grids, $device), "margin");
}

@function grid-gutter($device) {
	@return map-get(map-get($grids, $device), "gutter");
}

$last-margin: null;
$last-gutter: null;

@each $device, $grid in $grids {
	$breakpoint: map-get($grid, "breakpoint");
	$columns:    map-get($grid, "columns");
	$gutter:     map-get($grid, "gutter") / 2;
	$margin:     map-get($grid, "margin") - $gutter;

	@include breakpoint($breakpoint) {
		@if $margin != $last-margin {
			.container,
			.container-fixed {
				/* Container's margins */
				padding-right: $margin;
				padding-left:  $margin;
			}
		}

		@if $breakpoint {
			.container-fixed { max-width: $breakpoint; }
		}

		.container-#{$device}-no-margin {
			padding-right: 0;
			padding-left:  0;
		}

		@if $breakpoint {
			.row-#{$device}-top    { @include row-top;    }
			.row-#{$device}-center { @include row-center; }
			.row-#{$device}-bottom { @include row-bottom; }
		} @else {
			.row-#{$device}-top    { @extend .row-top;    }
			.row-#{$device}-center { @extend .row-center; }
			.row-#{$device}-bottom { @extend .row-bottom; }
		}

		@if $gutter != $last-gutter {
			.col {
				/* Gutters */
				padding-right: $gutter;
				padding-left:  $gutter;
			}
		}

		          .col-#{$device}-auto { width: auto; }
		.has-flex .col-#{$device}-auto { flex-basis: auto; }

		.col-#{$device}-top-0    { margin-top:    0; }
		.col-#{$device}-right-0  { margin-right:  0; }
		.col-#{$device}-bottom-0 { margin-bottom: 0; }
		.col-#{$device}-left-0   { margin-left:   0; }

		// Generate .col-sm-*, .col-md-* and .col-lg-*
		@for $i from 1 through $columns {
			$width: (100% / $columns) * $i;
			.col-#{$device}-#{$i},
			%col-#{$device}-#{$i} { width: $width; }

			.has-flex .col-#{$device}-#{$i},
			     %flex-col-#{$device}-#{$i} { flex-basis: $width; }

			.col-#{$device}-top-#{$i}    { margin-top:    $width; }
			.col-#{$device}-right-#{$i}  { margin-right:  $width; }
			.col-#{$device}-bottom-#{$i} { margin-bottom: $width; }
			.col-#{$device}-left-#{$i}   { margin-left:   $width; }
		}

		@if $breakpoint {
			.col-#{$device}-first  { @include col-first;  }
			.col-#{$device}-last   { @include col-last;   }
			.col-#{$device}-top    { @include col-top;    }
			.col-#{$device}-center { @include col-center; }
			.col-#{$device}-bottom { @include col-bottom; }
		} @else {
			.col-#{$device}-first  { @extend .col-first;  }
			.col-#{$device}-last   { @extend .col-last;   }
			.col-#{$device}-top    { @extend .col-top;    }
			.col-#{$device}-center { @extend .col-center; }
			.col-#{$device}-bottom { @extend .col-bottom; }
		}

		// Add some special .gutter-top-0 and .gutter-bottom-0 for special margin
		// Trust me, you don't want to refactor what you will find below
		%gutter-top-no-#{$gutter} {
			@if $gutter != $last-gutter { margin-top: 0; }
		}

		%gutter-right-no-#{$gutter} {
			@if $gutter != $last-gutter { padding-right: 0; }
		}

		%gutter-bottom-no-#{$gutter} {
			@if $gutter != $last-gutter { margin-bottom: 0; }
		}

		%gutter-left-no-#{$gutter} {
			@if $gutter != $last-gutter { padding-left: 0; }
		}

		%gutter-no-#{$gutter} {
			@if $gutter != $last-gutter {
				padding-right: 0;
				padding-left:  0;
			}
		}

		.gutter-top-0    { @extend %gutter-top-no-#{$gutter};    }
		.gutter-right-0  { @extend %gutter-right-no-#{$gutter};  }
		.gutter-bottom-0 { @extend %gutter-bottom-no-#{$gutter}; }
		.gutter-left-0   { @extend %gutter-left-no-#{$gutter};   }
		.gutter-0        { @extend %gutter-no-#{$gutter};        }

		.gutter-#{$device}-top-0    { @extend %gutter-top-no-#{$gutter};    }
		.gutter-#{$device}-right-0  { @extend %gutter-right-no-#{$gutter};  }
		.gutter-#{$device}-bottom-0 { @extend %gutter-bottom-no-#{$gutter}; }
		.gutter-#{$device}-left-0   { @extend %gutter-left-no-#{$gutter};   }
		.gutter-#{$device}-0        { @extend %gutter-no-#{$gutter};        }

		// Add some special .gutter-top-X and .gutter-bottom-X for special margin
		@for $i from 1 through 12 {
			%gutter-top-#{$gutter}-#{$i} {
				@if $gutter != $last-gutter { margin-top: $gutter * $i; }
			}

			%gutter-right-#{$gutter}-#{$i} {
				@if $gutter != $last-gutter { padding-right: $gutter * $i; }
			}

			%gutter-bottom-#{$gutter}-#{$i} {
				@if $gutter != $last-gutter { margin-bottom: $gutter * $i; }
			}

			%gutter-left-#{$gutter}-#{$i} {
				@if $gutter != $last-gutter { padding-left: $gutter * $i; }
			}

			%gutter-#{$gutter}-#{$i} {
				@if $gutter != $last-gutter {
					padding-right: $gutter * $i;
					padding-left:  $gutter * $i;
				}
			}

			.gutter-top-#{$i}    { @extend %gutter-top-#{$gutter}-#{$i};    }
			.gutter-right-#{$i}  { @extend %gutter-right-#{$gutter}-#{$i};  }
			.gutter-bottom-#{$i} { @extend %gutter-bottom-#{$gutter}-#{$i}; }
			.gutter-left-#{$i}   { @extend %gutter-left-#{$gutter}-#{$i};   }
			.gutter-#{$i}        { @extend %gutter-#{$gutter}-#{$i};        }

			.gutter-#{$device}-top-#{$i}    { @extend %gutter-top-#{$gutter}-#{$i};    }
			.gutter-#{$device}-right-#{$i}  { @extend %gutter-right-#{$gutter}-#{$i};  }
			.gutter-#{$device}-bottom-#{$i} { @extend %gutter-bottom-#{$gutter}-#{$i}; }
			.gutter-#{$device}-left-#{$i}   { @extend %gutter-left-#{$gutter}-#{$i};   }
			.gutter-#{$device}-#{$i}        { @extend %gutter-#{$gutter}-#{$i};        }
		}
	}

	$last-margin: $margin;
	$last-gutter: $gutter;
}
/* @end of Grid */