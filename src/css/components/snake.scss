/* @group .snake */
$gutter: grid-gutter("sm");

.snake {
	border: 4px solid $color-brand;
	position: absolute;
}

.snake-container {
	position: relative;
	z-index: 1;
}

// Using ::before and ::after may seems like a stupid solution
// Before, it was made using an inline SVG
// Unfortunately, it was too hard to adapt its size to the content
// Also, there were some bugs and that might not be supported
// The downside is we are no longer able to make the awesome animation
.snake-1 {
	border: 0 solid $color-brand;
	border-left-width: 4px;
	transition: border .3s;

	&::before,
	&::after {
		width: 108px;
		border: 4px solid;
		border-color: inherit;

		content: "";
		display: block;

		transition: inherit;
		transition-delay: -3s; // For an unknown reason, webkit browsers add a delay (inherit?) so we have to "reset" it
	}

	&::before {
		height: $gutter;
		border-width: 4px 4px 0 0;
	}

	.snake-container { padding-left: $gutter; }

	&::after {
		height: $gutter * 2.5;
		border-width: 0 4px 4px 0;
	}
}

.snake-2,
.snake-3 {
	position: relative;

	&::before,
	&::after {
		content: "";
		position: absolute;
	}

	&::before { border: 4px solid $color-brand; }
	&::after  { background: $color-white; }
}

.snake-2 {
	&::before {
		width:  44px; // sm=??, md=44, lg=56
		height: 40px; // sm=??, md=40, lg=63
		top:   -18px;
		left:  -48px;
	}

	&::after {
		width:  14px;
		height: 36px;
		top:    -6px;
		left:  -10px;
	}

	.row-reverse > .col > & {
		&::before,
		&::after  { left: auto; }
		&::before { right: -48px; }
		&::after  { right: -10px; }
	}

	&.snake-padding {
		padding-left: 30px;
		~ * { padding-left: 30px; }

		&::before { left: 0; }

		&::after {
			width: 28px;
			left:  24px;
		}

		.row-reverse > .col > & {
			padding-right: 30px;
			padding-left: inherit;

			~ * {
				padding-right: 30px;
				padding-left: inherit;
			}

			&::before { right: 0; }
			&::after  { right: 24px; }
		}
	}

	&.snake-margin { margin-top: 18px; }
}

.snake-3 {
	padding-left: 34px;
	~ * { padding-left: 34px; }

	&::before {
		width:  15px;
		height: 37px;
		top:   -25px;
		left:   16px;
	}

	&::after {
		top:    -1px;
		left:   27px;
		width:  12px;
		height: 21px;
	}

	&.snake-margin { margin-top: 25px; }
}

@each $colors in $colors-obsessions {
	$i:     index($colors-obsessions, $colors);
	$color: map-get($colors, "main");

	.obsession-#{$i} {
		.snake,
		.snake-1,
		.snake-2::before,
		.snake-3::before { border-color: $color; }
	}
}

@include media("md") {
	$gutter: grid-gutter("md");

	.snake-1 {
		margin-left: #{-$gutter};

		&::before,
		&::after  { width:  210px; }
		&::before { height: $gutter; }
		&::after  { height: $gutter * 2.875; }
	}

	.snake-3 {
		padding-left: 44px;
		~ * { padding-left: 44px; }

		&::before {
			width:  30px;
			height: 57px;
			top:   -40px;
			left:   12px;
		}

		&::after {
			top:    -2px;
			left:   36px;
			width:  14px;
			height: 27px;
		}

		&.snake-margin { margin-top: 40px; }
	}

	@if $gutter != grid-gutter("sm") {
		.snake-1 .snake-container { padding-left: $gutter; }
	}
}

@include media("lg") {
	$gutter: grid-gutter("lg");

	.snake-2 {
		&::before {
			width:  56px;
			height: 63px;
			top:   -40px;
			left:  -60px;
		}

		&::after {
			height: 47px;
			top:   -16px;
			left:  -10px;
		}

		.row-reverse > .col > & {
			&::before { right: -60px; }
		}

		&.snake-padding {
			&::before { left: -12px; }
		}
	}

	.snake-3 {
		padding-left: 58px;
		~ * { padding-left: 58px; }

		&::before {
			height: 68px;
			top:   -46px;
			left:   24px;
		}

		&::after {
			top:    -8px;
			left:   48px;
			height: 38px;
		}

		&.snake-margin { margin-top: 46px; }
	}

	@if $gutter != grid-gutter("md") {
		.snake-1 {
			margin-left: #{-$gutter};

			&::before { height: $gutter; }
			&::after  { height: $gutter * 2.875; }
			.snake-container { padding-left: $gutter; }
		}
	}
}

/*
.snake-1,
.snake-2,
.snake-3,
.snake-4-tmp {
	position: relative;

	&::before {
		border: 4px solid $color-brand;
		content: "";
		position: absolute;
		pointer-events: none;
	}
}

	.snake-container {
		background: $color-white;
		display: block;
		position: relative;
	}

	.snake-1 {
		&::before {
			width:  1.5em;
			height: 1.5em;
			top: calc(-.75em - 4px);
			left:  -1.5em;
		}

		.snake-container {
			padding-left: .333333em;
			margin-left: -.333333em;
		}
	}

	.snake-2 {
		&::before {
			width:  3em;
			height: 150%;
			min-height: 3em;
			bottom: -.75em;
			left:   calc(-#{$gutter} - 4px);
		}
	}

	.snake-3 {
		&::before {
			width:  55px;
			top:    -14px;
			bottom: -14px;
			left:   calc(-#{$gutter} - 4px);
		}

		.snake-wrapper { display: block; }
	}

	.snake-4-tmp {
		&::before {
			width:  114px;
			top:    -26px;
			bottom: -26px;
			left:   -26px;
		}
	}

@each $colors in $colors-obsessions {
	$i: index($colors-obsessions, $colors);

	.obsession-#{$i} {
		.snake-1,
		.snake-2,
		.snake-3,
		.snake-4-tmp {
			&::before { border-color: map-get($colors, "main"); }
		}
	}
}

@include media("md") {
	$gutter: grid-gutter("md");

	@if $gutter != grid-gutter("sm") {
		.snake-2,
		.snake-3 {
			&::before { left: calc(-#{$gutter} - 4px); }
		}
	}
}

@include media("lg") {
	$gutter: grid-gutter("lg");
	@if $gutter != grid-gutter("md") {
		.snake-2,
		.snake-3 {
			&::before { left: calc(-#{$gutter} - 4px); }
		}
	}
}*/
/* @end .snake */